/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Registers a new session key bounded to a scope without a transaction attached.<br />If you want to register an admin key, you must provide a signed raw transaction.
 * Required minimum session key permission level is `account`
 */
export type PrivateRegisterScopedSessionKey = PrivateRegisterScopedSessionKeyJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/register_scoped_session_key";
/**
 * Expiry of the session key
 */
export type ExpirySec = number;
/**
 * List of whitelisted IPs, if empty then any IP is allowed.
 */
export type IpWhitelist = IpWhitelist1[] | null;
export type IpWhitelist1 = string;
/**
 * User-defined session key label
 */
export type Label = string | null;
/**
 * Session key in the form of an Ethereum EOA
 */
export type PublicSessionKey = string;
/**
 * Scope of the session key. Defaults to READ_ONLY level permissions.
 */
export type Scope = "admin" | "account" | "read_only";
/**
 * A signed RLP encoded ETH transaction in form of a hex string (same as `w3.eth.account.sign_transaction(unsigned_tx, private_key).rawTransaction.hex()`) Must be included if the scope is ADMIN.
 */
export type SignedRawTx = string | null;
/**
 * Ethereum wallet address of account
 */
export type Wallet = string;
/**
 * Session key expiry timestamp in sec
 */
export type ExpirySec1 = number;
/**
 * List of whitelisted IPs, if empty then any IP is allowed.
 */
export type IpWhitelist2 = IpWhitelist3[] | null;
export type IpWhitelist3 = string;
/**
 * User-defined session key label
 */
export type Label1 = string | null;
/**
 * Session key in the form of an Ethereum EOA
 */
export type PublicSessionKey1 = string;
/**
 * Session key permission level scope
 */
export type Scope1 = "admin" | "account" | "read_only";
/**
 * ID to lookup status of transaction if signed_raw_tx is provided
 */
export type TransactionId = string | null;

export interface PrivateRegisterScopedSessionKeyJSONRPCSchema {
  request: PrivateRegisterScopedSessionKeyRequestSchema;
  response: PrivateRegisterScopedSessionKeyResponseSchema;
}
export interface PrivateRegisterScopedSessionKeyRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateRegisterScopedSessionKeyParamsSchema;
}
export interface PrivateRegisterScopedSessionKeyParamsSchema {
  expiry_sec: ExpirySec;
  ip_whitelist?: IpWhitelist;
  label?: Label;
  public_session_key: PublicSessionKey;
  scope?: Scope;
  signed_raw_tx?: SignedRawTx;
  wallet: Wallet;
}
export interface PrivateRegisterScopedSessionKeyResponseSchema {
  id: string | number;
  result: PrivateRegisterScopedSessionKeyResultSchema;
}
export interface PrivateRegisterScopedSessionKeyResultSchema {
  expiry_sec: ExpirySec1;
  ip_whitelist: IpWhitelist2;
  label: Label1;
  public_session_key: PublicSessionKey1;
  scope: Scope1;
  transaction_id: TransactionId;
}
