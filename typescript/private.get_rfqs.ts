/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Retrieves a list of RFQs matching filter criteria. Takers can use this to get their open RFQs, RFQ history, etc.
 * Required minimum session key permission level is `read_only`
 */
export type PrivateGetRfqs = PrivateGetRfqsJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/get_rfqs";
/**
 * Earliest `last_update_timestamp` to filter by (in ms since Unix epoch). If not provied, defaults to 0.
 */
export type FromTimestamp = number;
/**
 * Page number of results to return (default 1, returns last if above `num_pages`)
 */
export type Page = number;
/**
 * Number of results per page (default 100, max 1000)
 */
export type PageSize = number;
/**
 * RFQ ID filter, if applicable
 */
export type RfqId = string | null;
/**
 * RFQ status filter, if applicable
 */
export type Status = ("open" | "filled" | "cancelled" | "expired") | null;
/**
 * Subaccount ID for auth purposes, returned data will be scoped to this subaccount.
 */
export type SubaccountId = number;
/**
 * Latest `last_update_timestamp` to filter by (in ms since Unix epoch). If not provied, defaults to returning all data up to current time.
 */
export type ToTimestamp = number;
/**
 * Total number of items, across all pages
 */
export type Count = number;
/**
 * Number of pages
 */
export type NumPages = number;
/**
 * Ask total cost for the RFQ implied from orderbook (as `sell`)
 */
export type AskTotalCost = string | null;
/**
 * Bid total cost for the RFQ implied from orderbook (as `buy`)
 */
export type BidTotalCost = string | null;
/**
 * Cancel reason, if any
 */
export type CancelReason =
  | ""
  | "user_request"
  | "insufficient_margin"
  | "signed_max_fee_too_low"
  | "mmp_trigger"
  | "cancel_on_disconnect"
  | "session_key_deregistered"
  | "subaccount_withdrawn"
  | "rfq_no_longer_open"
  | "compliance";
/**
 * List of requested counterparties, if applicable
 */
export type Counterparties = Counterparties1[] | null;
export type Counterparties1 = string;
/**
 * Creation timestamp in ms since Unix epoch
 */
export type CreationTimestamp = number;
/**
 * Direction at which the RFQ was filled (only if filled)
 */
export type FilledDirection = ("buy" | "sell") | null;
/**
 * User-defined label, if any
 */
export type Label = string;
/**
 * Last update timestamp in ms since Unix epoch
 */
export type LastUpdateTimestamp = number;
/**
 * Amount in units of the base
 */
export type Amount = string;
/**
 * Leg direction
 */
export type Direction = "buy" | "sell";
/**
 * Instrument name
 */
export type InstrumentName = string;
/**
 * RFQ legs
 */
export type Legs = LegUnpricedSchema[];
/**
 * Mark total cost for the RFQ (assuming `buy` direction)
 */
export type MarkTotalCost = string | null;
/**
 * Max total cost for the RFQ
 */
export type MaxTotalCost = string | null;
/**
 * Min total cost for the RFQ
 */
export type MinTotalCost = string | null;
/**
 * RFQ ID
 */
export type RfqId1 = string;
/**
 * Status
 */
export type Status1 = "open" | "filled" | "cancelled" | "expired";
/**
 * Subaccount ID
 */
export type SubaccountId1 = number;
/**
 * Total cost for the RFQ (only if filled)
 */
export type TotalCost = string | null;
/**
 * RFQ expiry timestamp in ms since Unix epoch
 */
export type ValidUntil = number;
/**
 * RFQs matching filter criteria
 */
export type Rfqs = RFQResultSchema[];

export interface PrivateGetRfqsJSONRPCSchema {
  request: PrivateGetRfqsRequestSchema;
  response: PrivateGetRfqsResponseSchema;
}
export interface PrivateGetRfqsRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateGetRfqsParamsSchema;
}
export interface PrivateGetRfqsParamsSchema {
  from_timestamp?: FromTimestamp;
  page?: Page;
  page_size?: PageSize;
  rfq_id?: RfqId;
  status?: Status;
  subaccount_id: SubaccountId;
  to_timestamp?: ToTimestamp;
}
export interface PrivateGetRfqsResponseSchema {
  id: string | number;
  result: PrivateGetRfqsResultSchema;
}
export interface PrivateGetRfqsResultSchema {
  pagination: PaginationInfoSchema;
  rfqs: Rfqs;
}
/**
 * Pagination info
 */
export interface PaginationInfoSchema {
  count: Count;
  num_pages: NumPages;
}
export interface RFQResultSchema {
  ask_total_cost: AskTotalCost;
  bid_total_cost: BidTotalCost;
  cancel_reason: CancelReason;
  counterparties: Counterparties;
  creation_timestamp: CreationTimestamp;
  filled_direction: FilledDirection;
  label: Label;
  last_update_timestamp: LastUpdateTimestamp;
  legs: Legs;
  mark_total_cost: MarkTotalCost;
  max_total_cost: MaxTotalCost;
  min_total_cost: MinTotalCost;
  rfq_id: RfqId1;
  status: Status1;
  subaccount_id: SubaccountId1;
  total_cost: TotalCost;
  valid_until: ValidUntil;
}
export interface LegUnpricedSchema {
  amount: Amount;
  direction: Direction;
  instrument_name: InstrumentName;
}
