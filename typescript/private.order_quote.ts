/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Performs a "risk dry run" on an order, returning the estimated fee and whether the order is expected to pass.<br /><br />For market orders, the fill is assumed to happen at the supplied limit price. For accurate results the caller<br />should calculate an expected fill price from orderbook state and add a small buffer to it to account for latency.<br /><br />Should any exception be raised in the process of evaluating the order, a standard RPC error will be returned<br />with the error details.
 * Required minimum session key permission level is `read_only`
 */
export type PrivateOrderQuote = PrivateOrderQuoteJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/order_quote";
/**
 * Order amount in units of the base
 */
export type Amount = string;
/**
 * Order direction
 */
export type Direction = "buy" | "sell";
/**
 * Instrument name
 */
export type InstrumentName = string;
/**
 * Optional user-defined label for the order
 */
export type Label = string;
/**
 * Limit price in quote currency.<br />This field is still required for market orders because it is a component of the signature. However, market orders will not leave a resting order in the book in case of a partial fill.
 */
export type LimitPrice = string;
/**
 * Max fee per unit of volume, denominated in units of the quote currency (usually USDC).Order will be rejected if the supplied max fee is below the estimated fee for this order.
 */
export type MaxFee = string;
/**
 * Whether the order is tagged for market maker protections (default false)
 */
export type Mmp = boolean;
/**
 * Unique nonce defined as <UTC_timestamp in ms><random_number_up_to_3_digits> (e.g. 1695836058725001, where 001 is the random number).Note, using a random number beyond 3 digits will cause JSON serialization to fail.
 */
export type Nonce = number;
/**
 * Order type:<br />- `limit`: limit order (default)<br />- `market`: market order, note that limit_price is still required for market orders, but unfilled order portion will be marked as cancelled
 */
export type OrderType = "limit" | "market";
/**
 * If true, the order will not be able to increase position's size (default false). If the order amount exceeds available position size, the order will be filled up to the position size and the remainder will be cancelled. This flag is only supported for market orders or non-resting limit orders (IOC or FOK)
 */
export type ReduceOnly = boolean;
/**
 * Optional referral code for the order
 */
export type ReferralCode = string;
/**
 * UTC timestamp in ms, if provided the matching engine will reject the order with an error if `reject_timestamp` < `server_time`. Note that the timestamp must be consistent with the server time: use `public/get_time` method to obtain current server time.
 */
export type RejectTimestamp = number;
/**
 * Ethereum signature of the order
 */
export type Signature = string;
/**
 * Unix timestamp in seconds. Order signature becomes invalid after this time, and the system will cancel the order.Expiry MUST be at least 5 min from now.
 */
export type SignatureExpirySec = number;
/**
 * Owner wallet address or registered session key that signed order
 */
export type Signer = string;
/**
 * Subaccount ID
 */
export type SubaccountId = number;
/**
 * Time in force behaviour:<br />- `gtc`: good til cancelled (default)<br />- `post_only`: a limit order that will be rejected if it crosses any order in the book, i.e. acts as a taker order<br />- `fok`: fill or kill, will be rejected if it is not fully filled<br />- `ioc`: immediate or cancel, fill at best bid/ask (market) or at limit price (limit), the unfilled portion is cancelled<br />Note that the order will still expire on the `signature_expiry_sec` timestamp.
 */
export type TimeInForce = "gtc" | "post_only" | "fok" | "ioc";
/**
 * (Required for trigger orders) Index or Market price to trigger order at
 */
export type TriggerPrice = string | null;
/**
 * (Required for trigger orders) Trigger with Mark Price. Index price type no supported yet.
 */
export type TriggerPriceType = ("mark" | "index") | null;
/**
 * (Required for trigger orders) Stop-loss or Take-profit
 */
export type TriggerType = ("stoploss" | "takeprofit") | null;
/**
 * An estimate for how much the user will actually pay in fees for the order ($ for the whole trade).
 */
export type EstimatedFee = string;
/**
 * (Returns 0 for trigger orders) An estimate the amount that will be instantly crossed upon order submission.
 */
export type EstimatedFillAmount = string;
/**
 * (Returns 0 for trigger orders) An estimate for the average fill price of the order.
 */
export type EstimatedFillPrice = string;
/**
 * An estimate for the order status after submission. Fully filled orders will be marked as `filled`, unfilled and partially filled limit orders will be marked as `open` and partially filled market / IOC orders will be marked as `cancelled`.
 */
export type EstimatedOrderStatus = "open" | "filled" | "cancelled" | "expired" | "untriggered";
/**
 * (Returns 0 for trigger orders) An estimate for the realized PnL of the order. For orders with an estimated `cancelled` status this only includes PnL of the filled amount.
 */
export type EstimatedRealizedPnl = string;
/**
 * (Returns 0 for trigger orders) An estimate for the realized PnL of the order with cost basis calculated without considering fees. For orders with an estimated `cancelled` status this only includes PnL of the filled amount.
 */
export type EstimatedRealizedPnlExclFees = string;
/**
 * Reason for the order being invalid, if any.
 */
export type InvalidReason =
  | (
      | "Account is currently under maintenance margin requirements, trading is frozen."
      | "This order would cause account to fall under maintenance margin requirements."
      | "Insufficient buying power, only a single risk-reducing open order is allowed."
      | "Insufficient buying power, consider reducing order size."
      | "Insufficient buying power, consider reducing order size or canceling other orders."
      | "Consider canceling other limit orders or using IOC, FOK, or market orders. This order is risk-reducing, but if filled with other open orders, buying power might be insufficient."
      | "Insufficient buying power."
    )
  | null;
/**
 * `True` if order is expected to pass margin requirements.
 */
export type IsValid = boolean;
/**
 * Estimated maximum order amount.
 */
export type MaxAmount = string | null;
/**
 * (Returns 0 for trigger orders) User's hypothetical margin balance if the order or trade were to get accepted. For maker orders (limit and not IOC/FOK) this also includes the margin locked for other outstanding orders.
 */
export type PostInitialMargin = string;
/**
 * Subaccounts's liquidation price if the order were to be fully filled.
 */
export type PostLiquidationPrice = string | null;
/**
 * (Returns 0 for trigger orders) User's initial margin balance before the order or trade. For maker orders (limit and not IOC/FOK) this also includes the margin locked for other outstanding orders.
 */
export type PreInitialMargin = string;
/**
 * Recommended value for `max_fee` of the order (per contract).
 */
export type SuggestedMaxFee = string;

export interface PrivateOrderQuoteJSONRPCSchema {
  request: PrivateOrderQuoteRequestSchema;
  response: PrivateOrderQuoteResponseSchema;
}
export interface PrivateOrderQuoteRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateOrderQuoteParamsSchema;
}
export interface PrivateOrderQuoteParamsSchema {
  amount: Amount;
  direction: Direction;
  instrument_name: InstrumentName;
  label?: Label;
  limit_price: LimitPrice;
  max_fee: MaxFee;
  mmp?: Mmp;
  nonce: Nonce;
  order_type?: OrderType;
  reduce_only?: ReduceOnly;
  referral_code?: ReferralCode;
  reject_timestamp?: RejectTimestamp;
  signature: Signature;
  signature_expiry_sec: SignatureExpirySec;
  signer: Signer;
  subaccount_id: SubaccountId;
  time_in_force?: TimeInForce;
  trigger_price?: TriggerPrice;
  trigger_price_type?: TriggerPriceType;
  trigger_type?: TriggerType;
}
export interface PrivateOrderQuoteResponseSchema {
  id: string | number;
  result: PrivateOrderQuoteResultSchema;
}
export interface PrivateOrderQuoteResultSchema {
  estimated_fee: EstimatedFee;
  estimated_fill_amount: EstimatedFillAmount;
  estimated_fill_price: EstimatedFillPrice;
  estimated_order_status: EstimatedOrderStatus;
  estimated_realized_pnl: EstimatedRealizedPnl;
  estimated_realized_pnl_excl_fees: EstimatedRealizedPnlExclFees;
  invalid_reason: InvalidReason;
  is_valid: IsValid;
  max_amount: MaxAmount;
  post_initial_margin: PostInitialMargin;
  post_liquidation_price: PostLiquidationPrice;
  pre_initial_margin: PreInitialMargin;
  suggested_max_fee: SuggestedMaxFee;
}
