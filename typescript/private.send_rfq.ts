/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Requests two-sided quotes from participating market makers.
 * Required minimum session key permission level is `account`
 */
export type PrivateSendRfq = PrivateSendRfqJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/send_rfq";
/**
 * Optional list of market maker account addresses to request quotes from. If not supplied, all market makers who are approved as RFQ makers will be notified.
 */
export type Counterparties = Counterparties1[] | null;
export type Counterparties1 = string;
/**
 * Optional user-defined label for the RFQ
 */
export type Label = string;
/**
 * Amount in units of the base
 */
export type Amount = string;
/**
 * Leg direction
 */
export type Direction = "buy" | "sell";
/**
 * Instrument name
 */
export type InstrumentName = string;
/**
 * RFQ legs
 */
export type Legs = LegUnpricedSchema[];
/**
 * An optional max total cost for the RFQ. Only used when the RFQ sender executes as buyer. Polling endpoints and channels will ignore quotes where the total cost across all legs is above this value. Positive values mean the RFQ sender expects to pay $, negative mean the RFQ sender expects to receive $.This field is not disclosed to the market makers.
 */
export type MaxTotalCost = string | null;
/**
 * An optional min total cost for the RFQ. Only used when the RFQ sender executes as seller. Polling endpoints and channels will ignore quotes where the total cost across all legs is below this value. Positive values mean the RFQ sender expects to receive $, negative mean the RFQ sender expects to pay $.This field is not disclosed to the market makers.
 */
export type MinTotalCost = string | null;
/**
 * Subaccount ID
 */
export type SubaccountId = number;
/**
 * Ask total cost for the RFQ implied from orderbook (as `sell`)
 */
export type AskTotalCost = string | null;
/**
 * Bid total cost for the RFQ implied from orderbook (as `buy`)
 */
export type BidTotalCost = string | null;
/**
 * Cancel reason, if any
 */
export type CancelReason =
  | ""
  | "user_request"
  | "insufficient_margin"
  | "signed_max_fee_too_low"
  | "mmp_trigger"
  | "cancel_on_disconnect"
  | "session_key_deregistered"
  | "subaccount_withdrawn"
  | "rfq_no_longer_open"
  | "compliance";
/**
 * List of requested counterparties, if applicable
 */
export type Counterparties2 = Counterparties3[] | null;
export type Counterparties3 = string;
/**
 * Creation timestamp in ms since Unix epoch
 */
export type CreationTimestamp = number;
/**
 * Direction at which the RFQ was filled (only if filled)
 */
export type FilledDirection = ("buy" | "sell") | null;
/**
 * User-defined label, if any
 */
export type Label1 = string;
/**
 * Last update timestamp in ms since Unix epoch
 */
export type LastUpdateTimestamp = number;
/**
 * RFQ legs
 */
export type Legs1 = LegUnpricedSchema1[];
/**
 * Mark total cost for the RFQ (assuming `buy` direction)
 */
export type MarkTotalCost = string | null;
/**
 * Max total cost for the RFQ
 */
export type MaxTotalCost1 = string | null;
/**
 * Min total cost for the RFQ
 */
export type MinTotalCost1 = string | null;
/**
 * RFQ ID
 */
export type RfqId = string;
/**
 * Status
 */
export type Status = "open" | "filled" | "cancelled" | "expired";
/**
 * Subaccount ID
 */
export type SubaccountId1 = number;
/**
 * Total cost for the RFQ (only if filled)
 */
export type TotalCost = string | null;
/**
 * RFQ expiry timestamp in ms since Unix epoch
 */
export type ValidUntil = number;

export interface PrivateSendRfqJSONRPCSchema {
  request: PrivateSendRfqRequestSchema;
  response: PrivateSendRfqResponseSchema;
}
export interface PrivateSendRfqRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateSendRfqParamsSchema;
}
export interface PrivateSendRfqParamsSchema {
  counterparties?: Counterparties;
  label?: Label;
  legs: Legs;
  max_total_cost?: MaxTotalCost;
  min_total_cost?: MinTotalCost;
  subaccount_id: SubaccountId;
}
export interface LegUnpricedSchema {
  amount: Amount;
  direction: Direction;
  instrument_name: InstrumentName;
}
export interface PrivateSendRfqResponseSchema {
  id: string | number;
  result: PrivateSendRfqResultSchema;
}
export interface PrivateSendRfqResultSchema {
  ask_total_cost: AskTotalCost;
  bid_total_cost: BidTotalCost;
  cancel_reason: CancelReason;
  counterparties: Counterparties2;
  creation_timestamp: CreationTimestamp;
  filled_direction: FilledDirection;
  label: Label1;
  last_update_timestamp: LastUpdateTimestamp;
  legs: Legs1;
  mark_total_cost: MarkTotalCost;
  max_total_cost: MaxTotalCost1;
  min_total_cost: MinTotalCost1;
  rfq_id: RfqId;
  status: Status;
  subaccount_id: SubaccountId1;
  total_cost: TotalCost;
  valid_until: ValidUntil;
}
export interface LegUnpricedSchema1 {
  amount: Amount;
  direction: Direction;
  instrument_name: InstrumentName;
}
