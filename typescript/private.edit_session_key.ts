/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Edits session key parameters such as label and IP whitelist.<br />For non-admin keys you can also toggle whether to disable a particular key.<br />Disabling non-admin keys must be done through /deregister_session_key
 * Required minimum session key permission level is `account`
 */
export type PrivateEditSessionKey = PrivateEditSessionKeyJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/edit_session_key";
/**
 * Flag whether or not to disable to session key. Defaulted to false. Only allowed for non-admin keys. Admin keys must go through `/deregister_session_key` for now.
 */
export type Disable = boolean;
/**
 * Optional list of whitelisted IPs, an empty list can be supplied to whitelist all IPs
 */
export type IpWhitelist = IpWhitelist1[] | null;
export type IpWhitelist1 = string;
/**
 * Optional new label for the session key
 */
export type Label = string | null;
/**
 * Session key in the form of an Ethereum EOA
 */
export type PublicSessionKey = string;
/**
 * Ethereum wallet address of account
 */
export type Wallet = string;
/**
 * Session key expiry timestamp in sec
 */
export type ExpirySec = number;
export type IpWhitelist3 = string;
/**
 * List of whitelisted IPs, if empty then any IP is allowed.
 */
export type IpWhitelist2 = IpWhitelist3[];
/**
 * User-defined session key label
 */
export type Label1 = string;
/**
 * Public session key address (Ethereum EOA)
 */
export type PublicSessionKey1 = string;
/**
 * Session key permission level scope
 */
export type Scope = string;

export interface PrivateEditSessionKeyJSONRPCSchema {
  request: PrivateEditSessionKeyRequestSchema;
  response: PrivateEditSessionKeyResponseSchema;
}
export interface PrivateEditSessionKeyRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateEditSessionKeyParamsSchema;
}
export interface PrivateEditSessionKeyParamsSchema {
  disable?: Disable;
  ip_whitelist?: IpWhitelist;
  label?: Label;
  public_session_key: PublicSessionKey;
  wallet: Wallet;
}
export interface PrivateEditSessionKeyResponseSchema {
  id: string | number;
  result: PrivateEditSessionKeyResultSchema;
}
export interface PrivateEditSessionKeyResultSchema {
  expiry_sec: ExpirySec;
  ip_whitelist: IpWhitelist2;
  label: Label1;
  public_session_key: PublicSessionKey1;
  scope: Scope;
}
