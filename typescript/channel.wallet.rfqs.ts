/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Subscribe to RFQs directed to a given wallet.
 */
export type WalletRfqs = WalletRfqsPubSubSchema;
/**
 * Account (wallet) of RFQ market maker
 */
export type Wallet = string;
export type Method = string;
/**
 * Subscribed channel name
 */
export type Channel = string;
/**
 * Cancel reason, if any
 */
export type CancelReason =
  | ""
  | "user_request"
  | "insufficient_margin"
  | "signed_max_fee_too_low"
  | "mmp_trigger"
  | "cancel_on_disconnect"
  | "session_key_deregistered"
  | "subaccount_withdrawn"
  | "rfq_no_longer_open"
  | "compliance";
/**
 * Creation timestamp in ms since Unix epoch
 */
export type CreationTimestamp = number;
/**
 * Direction at which the RFQ was filled (only if filled)
 */
export type FilledDirection = ("buy" | "sell") | null;
/**
 * Last update timestamp in ms since Unix epoch
 */
export type LastUpdateTimestamp = number;
/**
 * Amount in units of the base
 */
export type Amount = string;
/**
 * Leg direction
 */
export type Direction = "buy" | "sell";
/**
 * Instrument name
 */
export type InstrumentName = string;
/**
 * RFQ legs
 */
export type Legs = LegUnpricedSchema[];
/**
 * RFQ ID
 */
export type RfqId = string;
/**
 * Status
 */
export type Status = "open" | "filled" | "cancelled" | "expired";
/**
 * Subaccount ID
 */
export type SubaccountId = number;
/**
 * Total cost for the RFQ (only if filled)
 */
export type TotalCost = string | null;
/**
 * RFQ expiry timestamp in ms since Unix epoch
 */
export type ValidUntil = number;
export type Data = RFQResultPublicSchema[];

export interface WalletRfqsPubSubSchema {
  channel_params: WalletRfqsChannelSchema;
  notification: WalletRfqsNotificationSchema;
}
export interface WalletRfqsChannelSchema {
  wallet: Wallet;
}
export interface WalletRfqsNotificationSchema {
  method: Method;
  params: WalletRfqsNotificationParamsSchema;
}
export interface WalletRfqsNotificationParamsSchema {
  channel: Channel;
  data: Data;
}
export interface RFQResultPublicSchema {
  cancel_reason: CancelReason;
  creation_timestamp: CreationTimestamp;
  filled_direction: FilledDirection;
  last_update_timestamp: LastUpdateTimestamp;
  legs: Legs;
  rfq_id: RfqId;
  status: Status;
  subaccount_id: SubaccountId;
  total_cost: TotalCost;
  valid_until: ValidUntil;
}
export interface LegUnpricedSchema {
  amount: Amount;
  direction: Direction;
  instrument_name: InstrumentName;
}
