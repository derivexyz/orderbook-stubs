/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Get the current mmp config for a subaccount (optionally filtered by currency)
 * Required minimum session key permission level is `read_only`
 */
export type PrivateGetMmpConfig = PrivateGetMmpConfigJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/get_mmp_config";
/**
 * Currency to get the config for. If not provided, returns all configs for the subaccount
 */
export type Currency = string | null;
/**
 * Subaccount_id for which to get the config
 */
export type SubaccountId = number;
/**
 * Currency of this mmp config
 */
export type Currency1 = string;
/**
 * Whether the subaccount is currently frozen
 */
export type IsFrozen = boolean;
/**
 * Maximum total order amount that can be traded within the mmp_interval across all instruments of the provided currency. The amounts are not netted, so a filled bid of 1 and a filled ask of 2 would count as 3.<br />Default: 0 (no limit)
 */
export type MmpAmountLimit = string;
/**
 * Maximum total delta that can be traded within the mmp_interval across all instruments of the provided currency. This quantity is netted, so a filled order with +1 delta and a filled order with -2 delta would count as -1<br />Default: 0 (no limit)
 */
export type MmpDeltaLimit = string;
/**
 * Time interval in ms setting how long the subaccount is frozen after an mmp trigger, if 0 then a manual reset would be required via private/reset_mmp
 */
export type MmpFrozenTime = number;
/**
 * Time interval in ms over which the limits are monotored, if 0 then mmp is disabled
 */
export type MmpInterval = number;
/**
 * Timestamp in ms after which the subaccount will be unfrozen
 */
export type MmpUnfreezeTime = number;
/**
 * Subaccount_id for which to set the config
 */
export type SubaccountId1 = number;
export type Result = MMPConfigResultSchema[];

export interface PrivateGetMmpConfigJSONRPCSchema {
  request: PrivateGetMmpConfigRequestSchema;
  response: PrivateGetMmpConfigResponseSchema;
}
export interface PrivateGetMmpConfigRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateGetMmpConfigParamsSchema;
}
export interface PrivateGetMmpConfigParamsSchema {
  currency?: Currency;
  subaccount_id: SubaccountId;
}
export interface PrivateGetMmpConfigResponseSchema {
  id: string | number;
  result: Result;
}
export interface MMPConfigResultSchema {
  currency: Currency1;
  is_frozen: IsFrozen;
  mmp_amount_limit?: MmpAmountLimit;
  mmp_delta_limit?: MmpDeltaLimit;
  mmp_frozen_time: MmpFrozenTime;
  mmp_interval: MmpInterval;
  mmp_unfreeze_time: MmpUnfreezeTime;
  subaccount_id: SubaccountId1;
}
