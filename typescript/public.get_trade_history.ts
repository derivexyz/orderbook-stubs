/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Get trade history for a subaccount, with filter parameters.
 */
export type PublicGetTradeHistory = PublicGetTradeHistoryJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "public/get_trade_history";
/**
 * Currency to filter by (defaults to all)
 */
export type Currency = string | null;
/**
 * Earliest timestamp to filter by (in ms since Unix epoch). If not provied, defaults to 0.
 */
export type FromTimestamp = number;
/**
 * Instrument name to filter by (defaults to all)
 */
export type InstrumentName = string | null;
/**
 * Instrument type to filter by (defaults to all)
 */
export type InstrumentType = ("erc20" | "option" | "perp") | null;
/**
 * Page number of results to return (default 1, returns last if above `num_pages`)
 */
export type Page = number;
/**
 * Number of results per page (default 100, max 1000)
 */
export type PageSize = number;
/**
 * Latest timestamp to filter by (in ms since Unix epoch). If not provied, defaults to returning all data up to current time.
 */
export type ToTimestamp = number;
/**
 * Trade ID to filter by. If set, all other filters are ignored
 */
export type TradeId = string | null;
/**
 * On-chain tx hash to filter by. If set, all other filters are ignored
 */
export type TxHash = string | null;
/**
 * Transaction status to filter by (default `settled`).
 */
export type TxStatus = "settled" | "reverted" | "timed_out";
/**
 * Total number of items, across all pages
 */
export type Count = number;
/**
 * Number of pages
 */
export type NumPages = number;
/**
 * Order direction
 */
export type Direction = "buy" | "sell";
/**
 * Index price of the underlying at the time of the trade
 */
export type IndexPrice = string;
/**
 * Instrument name
 */
export type InstrumentName1 = string;
/**
 * Role of the user in the trade
 */
export type LiquidityRole = "maker" | "taker";
/**
 * Mark price of the instrument at the time of the trade
 */
export type MarkPrice = string;
/**
 * Quote ID if the trade was executed via RFQ
 */
export type QuoteId = string | null;
/**
 * Realized PnL for this trade
 */
export type RealizedPnl = string;
/**
 * Realized PnL for this trade using cost accounting that excludes fees
 */
export type RealizedPnlExclFees = string;
/**
 * Subaccount ID
 */
export type SubaccountId = number;
/**
 * Trade timestamp (in ms since Unix epoch)
 */
export type Timestamp = number;
/**
 * Amount filled in this trade
 */
export type TradeAmount = string;
/**
 * Fee for this trade
 */
export type TradeFee = string;
/**
 * Trade ID
 */
export type TradeId1 = string;
/**
 * Price at which the trade was filled
 */
export type TradePrice = string;
/**
 * Blockchain transaction hash
 */
export type TxHash1 = string;
/**
 * Blockchain transaction status
 */
export type TxStatus1 = "settled" | "reverted" | "timed_out";
/**
 * Wallet address (owner) of the subaccount
 */
export type Wallet = string;
/**
 * List of trades
 */
export type Trades = TradeSettledPublicResponseSchema[];

export interface PublicGetTradeHistoryJSONRPCSchema {
  request: PublicGetTradeHistoryRequestSchema;
  response: PublicGetTradeHistoryResponseSchema;
}
export interface PublicGetTradeHistoryRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PublicGetTradeHistoryParamsSchema;
}
export interface PublicGetTradeHistoryParamsSchema {
  currency?: Currency;
  from_timestamp?: FromTimestamp;
  instrument_name?: InstrumentName;
  instrument_type?: InstrumentType;
  page?: Page;
  page_size?: PageSize;
  to_timestamp?: ToTimestamp;
  trade_id?: TradeId;
  tx_hash?: TxHash;
  tx_status?: TxStatus;
}
export interface PublicGetTradeHistoryResponseSchema {
  id: string | number;
  result: PublicGetTradeHistoryResultSchema;
}
export interface PublicGetTradeHistoryResultSchema {
  pagination: PaginationInfoSchema;
  trades: Trades;
}
/**
 * Pagination info
 */
export interface PaginationInfoSchema {
  count: Count;
  num_pages: NumPages;
}
export interface TradeSettledPublicResponseSchema {
  direction: Direction;
  index_price: IndexPrice;
  instrument_name: InstrumentName1;
  liquidity_role: LiquidityRole;
  mark_price: MarkPrice;
  quote_id: QuoteId;
  realized_pnl: RealizedPnl;
  realized_pnl_excl_fees: RealizedPnlExclFees;
  subaccount_id: SubaccountId;
  timestamp: Timestamp;
  trade_amount: TradeAmount;
  trade_fee: TradeFee;
  trade_id: TradeId1;
  trade_price: TradePrice;
  tx_hash: TxHash1;
  tx_status: TxStatus1;
  wallet: Wallet;
}
