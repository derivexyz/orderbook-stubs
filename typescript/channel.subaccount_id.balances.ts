/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Subscribe to changes in user's positions for a given subaccount ID.<br /><br />For perpetuals, additional balance updates are emitted under the name Q-{ccy}-PERP where Q stands for "quote".<br />This balance is a proxy for an on-chain state of lastMarkPrice.<br />Because of a synchronization lag with the on-chain state, the orderbook instead keeps track of a running total cost of perpetual trades,<br /><br />For example:<br />Q-ETH-PERP balance of $6,600 and an ETH-PERP balance of 3 means the lastMarkPrice state is estimated to be $2,200.
 */
export type SubaccountIdBalances = SubaccountIdBalancesPubSubSchema;
/**
 * Subaccount ID
 */
export type SubaccountId = number;
export type Method = string;
/**
 * Subscribed channel name
 */
export type Channel = string;
/**
 * Name of colletaral asset or instrument
 */
export type Name = string;
/**
 * Balance after update
 */
export type NewBalance = string;
/**
 * Balance before update
 */
export type PreviousBalance = string;
/**
 * Type of transaction
 */
export type UpdateType =
  | "trade"
  | "asset_deposit"
  | "asset_withdrawal"
  | "transfer"
  | "subaccount_deposit"
  | "subaccount_withdrawal"
  | "liquidation"
  | "liquidator"
  | "onchain_drift_fix"
  | "perp_settlement"
  | "option_settlement"
  | "interest_accrual"
  | "onchain_revert"
  | "double_revert";
export type Data = BalanceUpdateSchema[];

export interface SubaccountIdBalancesPubSubSchema {
  channel_params: SubaccountIdBalancesChannelSchema;
  notification: SubaccountIdBalancesNotificationSchema;
}
export interface SubaccountIdBalancesChannelSchema {
  subaccount_id: SubaccountId;
}
export interface SubaccountIdBalancesNotificationSchema {
  method: Method;
  params: SubaccountIdBalancesNotificationParamsSchema;
}
export interface SubaccountIdBalancesNotificationParamsSchema {
  channel: Channel;
  data: Data;
}
export interface BalanceUpdateSchema {
  name: Name;
  new_balance: NewBalance;
  previous_balance: PreviousBalance;
  update_type: UpdateType;
}
