/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Returns a paginated liquidation history for all subaccounts. Note that the pagination is based on the number of<br />raw events that include bids, auction start, and auction end events. This means that the count returned in the<br />pagination info will be larger than the total number of auction events. This also means the number of returned<br />auctions per page will be smaller than the supplied `page_size`.
 */
export type PublicGetLiquidationHistory = PublicGetLiquidationHistoryJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "public/get_liquidation_history";
/**
 * End timestamp of the event history (default current time)
 */
export type EndTimestamp = number;
/**
 * Page number of results to return (default 1, returns last if above `num_pages`)
 */
export type Page = number;
/**
 * Number of results per page (default 100, max 1000)
 */
export type PageSize = number;
/**
 * Start timestamp of the event history (default 0)
 */
export type StartTimestamp = number;
/**
 * (Optional) Subaccount ID
 */
export type SubaccountId = number | null;
/**
 * Unique ID of the auction
 */
export type AuctionId = string;
/**
 * Type of auction
 */
export type AuctionType = "solvent" | "insolvent";
export type AmountsLiquidated1 = string;
/**
 * Cash received by the subaccount for the liquidation. For the liquidated accounts this is the amount the liquidator paid to buy out the percentage of the portfolio. For the liquidator account, this is the amount they received from the security module (if positive) or the amount they paid for the bid (if negative)
 */
export type CashReceived = string;
/**
 * Realized PnL due to liquidating or being liquidated at a discount to mark portfolio value
 */
export type DiscountPnl = string;
/**
 * Percent of the subaccount that was liquidated
 */
export type PercentLiquidated = string;
export type PositionsRealizedPnl1 = string;
export type PositionsRealizedPnlExclFees1 = string;
/**
 * Realized PnL of the auction bid, assuming positions are closed at mark price at the time of the liquidation
 */
export type RealizedPnl = string;
/**
 * Realized PnL of the auction bid, excluding fees from total cost basis, assuming positions are closed at mark price at the time of the liquidation
 */
export type RealizedPnlExclFees = string;
/**
 * Timestamp of the bid (in ms since UNIX epoch)
 */
export type Timestamp = number;
/**
 * Hash of the bid transaction
 */
export type TxHash = string;
/**
 * List of auction bid events
 */
export type Bids = AuctionBidEventSchema[];
/**
 * Timestamp of the auction end (in ms since UNIX epoch), or `null` if not ended
 */
export type EndTimestamp1 = number | null;
/**
 * Fee paid by the subaccount
 */
export type Fee = string;
/**
 * Timestamp of the auction start (in ms since UNIX epoch)
 */
export type StartTimestamp1 = number;
/**
 * Liquidated subaccount ID
 */
export type SubaccountId1 = number;
/**
 * Hash of the transaction that started the auction
 */
export type TxHash1 = string;
/**
 * List of auction results
 */
export type Auctions = AuctionResultSchema[];
/**
 * Total number of items, across all pages
 */
export type Count = number;
/**
 * Number of pages
 */
export type NumPages = number;

export interface PublicGetLiquidationHistoryJSONRPCSchema {
  request: PublicGetLiquidationHistoryRequestSchema;
  response: PublicGetLiquidationHistoryResponseSchema;
}
export interface PublicGetLiquidationHistoryRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PublicGetLiquidationHistoryParamsSchema;
}
export interface PublicGetLiquidationHistoryParamsSchema {
  end_timestamp?: EndTimestamp;
  page?: Page;
  page_size?: PageSize;
  start_timestamp?: StartTimestamp;
  subaccount_id?: SubaccountId;
}
export interface PublicGetLiquidationHistoryResponseSchema {
  id: string | number;
  result: PublicGetLiquidationHistoryResultSchema;
}
export interface PublicGetLiquidationHistoryResultSchema {
  auctions: Auctions;
  pagination: PaginationInfoSchema;
}
export interface AuctionResultSchema {
  auction_id: AuctionId;
  auction_type: AuctionType;
  bids: Bids;
  end_timestamp: EndTimestamp1;
  fee: Fee;
  start_timestamp: StartTimestamp1;
  subaccount_id: SubaccountId1;
  tx_hash: TxHash1;
}
export interface AuctionBidEventSchema {
  amounts_liquidated: AmountsLiquidated;
  cash_received: CashReceived;
  discount_pnl: DiscountPnl;
  percent_liquidated: PercentLiquidated;
  positions_realized_pnl: PositionsRealizedPnl;
  positions_realized_pnl_excl_fees: PositionsRealizedPnlExclFees;
  realized_pnl: RealizedPnl;
  realized_pnl_excl_fees: RealizedPnlExclFees;
  timestamp: Timestamp;
  tx_hash: TxHash;
}
/**
 * Amounts of each asset that were closed
 */
export interface AmountsLiquidated {
  [k: string]: AmountsLiquidated1;
}
/**
 * Realized PnL of each position that was closed
 */
export interface PositionsRealizedPnl {
  [k: string]: PositionsRealizedPnl1;
}
/**
 * Realized PnL of each position that was closed, excluding fees from total cost basis
 */
export interface PositionsRealizedPnlExclFees {
  [k: string]: PositionsRealizedPnlExclFees1;
}
/**
 * Pagination info
 */
export interface PaginationInfoSchema {
  count: Count;
  num_pages: NumPages;
}
