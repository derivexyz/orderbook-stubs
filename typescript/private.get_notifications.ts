/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Get the notifications related to a subaccount.
 * Required minimum session key permission level is `read_only`
 */
export type PrivateGetNotifications = PrivateGetNotificationsJSONRPCSchema;
export type HttpMethod = "POST";
export type Method = "private/get_notifications";
/**
 * Page number of results to return
 */
export type Page = number | null;
/**
 * Number of results per page (must be between 0-50)
 */
export type PageSize = number | null;
/**
 * Status of the notification
 */
export type Status = ("unseen" | "seen" | "hidden") | null;
/**
 * Subaccount_id (must be set if wallet param is not set)
 */
export type SubaccountId = number | null;
/**
 * List of notification types to filter by
 */
export type Type = Type1[] | null;
export type Type1 = "deposit" | "withdraw" | "transfer" | "trade" | "settlement" | "liquidation" | "custom";
/**
 * Wallet address (if set, subaccount_id ignored)
 */
export type Wallet = string | null;
/**
 * The specific event leading to the notification.
 */
export type Event = string;
/**
 * The unique identifier for the notification.
 */
export type Id = number;
/**
 * The status of the notification, indicating if it has been read, pending, or processed.
 */
export type Status1 = string;
/**
 * The subaccount_id associated with the notification.
 */
export type SubaccountId1 = number;
/**
 * The timestamp indicating when the notification was created or triggered.
 */
export type Timestamp = number;
/**
 * The transaction id associated with the notification.
 */
export type TransactionId = number | null;
/**
 * The transaction hash associated with the notification.
 */
export type TxHash = string | null;
/**
 * Notification response
 */
export type Notifications = NotificationResponseSchema[];
/**
 * Total number of items, across all pages
 */
export type Count = number;
/**
 * Number of pages
 */
export type NumPages = number;

export interface PrivateGetNotificationsJSONRPCSchema {
  request: PrivateGetNotificationsRequestSchema;
  response: PrivateGetNotificationsResponseSchema;
}
export interface PrivateGetNotificationsRequestSchema {
  httpMethod: HttpMethod;
  id?: string | number;
  method: Method;
  params: PrivateGetNotificationsParamsSchema;
}
export interface PrivateGetNotificationsParamsSchema {
  page?: Page;
  page_size?: PageSize;
  status?: Status;
  subaccount_id?: SubaccountId;
  type?: Type;
  wallet?: Wallet;
}
export interface PrivateGetNotificationsResponseSchema {
  id: string | number;
  result: PrivateGetNotificationsResultSchema;
}
export interface PrivateGetNotificationsResultSchema {
  notifications: Notifications;
  pagination: PaginationInfoSchema;
}
export interface NotificationResponseSchema {
  event: Event;
  event_details: EventDetails;
  id: Id;
  status: Status1;
  subaccount_id: SubaccountId1;
  timestamp: Timestamp;
  transaction_id?: TransactionId;
  tx_hash?: TxHash;
}
/**
 * A JSON-structured dictionary containing detailed data or context about the event.
 */
export interface EventDetails {
  [k: string]: any;
}
/**
 * Pagination info
 */
export interface PaginationInfoSchema {
  count: Count;
  num_pages: NumPages;
}
